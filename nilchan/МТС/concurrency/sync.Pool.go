package main

import (
	"fmt"
	"sync"
)

// Условие: Вам нужно создать пул для объектов, которые используются в
// тестах. Эти объекты можно переиспользовать в разных тестах, чтобы ускорить процесс тестирования.

// 1. Напишите структуру TestObject , которая будет имитировать объект, используемый в тестах.
// 2. Реализуйте пул для этих объектов с использованием sync.Pool.
// 3. Каждая горутина должна извлекать объект из пула, использовать его в своем тесте и возвращать обратно.

type TestObject struct {
	ID int
}

func main() {
	var wg sync.WaitGroup
	var idCounter int
	var counterMu sync.Mutex

	// Создаём пул объектов
	pool := &sync.Pool{
		New: func() interface{} {
			counterMu.Lock()
			defer counterMu.Unlock()
			obj := &TestObject{ID: idCounter}
			idCounter++
			fmt.Println("Создан новый объект:", obj.ID)
			return obj
		},
	}

	// Использование пула в тестах
	for i := 0; i < 5; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			obj := pool.Get().(*TestObject)
			fmt.Printf("[Горутина %d] Использует объект с ID: %d\n", i, obj.ID)

			// Имитация использования объекта (например, сбросить состояние)
			// obj.Reset() — если бы была

			// Вернуть объект в пул
			pool.Put(obj)
		}(i)
	}
	wg.Wait()
}

// ✅ Ключевые моменты:
// sync.Pool — это быстрый способ переиспользовать временные объекты, особенно полезен в высоконагруженных тестах или серверных задачах.
// Объекты в пуле могут быть удалены сборщиком мусора, если в системе нехватка памяти — это не кэш, а оптимизация.
