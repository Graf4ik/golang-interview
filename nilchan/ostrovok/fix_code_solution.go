package ostrovok

import (
	"fmt"
	"log"
	"net/http"
	"sync/atomic"
	"time"
)

/*
–£ —Ç–µ–±—è –≤ –∫–æ–¥–µ –µ—Å—Ç—å —Å–µ—Ä—å—ë–∑–Ω–∞—è –≥–æ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö (data race), —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π rates, –∫–æ—Ç–æ—Ä–∞—è:
—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ http.HandlerFunc (–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑ –º–Ω–æ–≥–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω),
–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ background-–≥–æ—Ä—É—Ç–∏–Ω–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
‚ùó –ü—Ä–æ–±–ª–µ–º–∞
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è rates ‚Äî —ç—Ç–æ map[string]float64, –∏ map –≤ Go –Ω–µ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞.
–¢—ã:
–ß–∏—Ç–∞–µ—à—å rates[from] –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ
–ü–∏—à–µ—à—å rates = newrates –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
*/

var rates atomic.Value // –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

// –Ω—É–∂–Ω–æ –ø–æ—Ñ–∏–∫—Å–∏—Ç—å –∫–æ–¥
func main() {
	initialRates, err := readConversionRates()

	if err != nil {
		log.Fatalf("readConversionRates() failed: %s", err)
	}

	rates.Store(initialRates) // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ

	// background task update conversion rates  —Ñ–æ–Ω–æ–≤–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	go func() {
		for {
			time.Sleep(time.Minute)
			newRates, err := readConversionRates()
			if err != nil {
				log.Printf("readConversionRates() failed: %s", err)
			}
			rates.Store(newRates)
		}
	}()

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// parse 'from' and 'value' from query params
		from := "RUB"
		val := 140.0

		currentRates, ok := rates.Load().(map[string]float64)
		rate, ok := currentRates[from]
		if !ok {
			http.NotFound(w, r)
			return
		}

		convVal := val / rate

		fmt.Fprint(w, convVal)
	})

	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal(err)
	}
}

/*
üß† –ü–æ—á–µ–º—É atomic.Value?
–û–Ω –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
–ë–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ sync.RWMutex
*/

// readConversionRates reads rates from a file or an external service (relatively long running function).
func readConversionRates() (map[string]float64, error) {
	// resp, err := http.Get("https://example.org/conv-rates")
	time.Sleep(100 * time.Millisecond)

	return map[string]float64{
		"USD": 1.0,
		"RUB": 70.0,
		"EUR": 95.0,
	}, nil
}
