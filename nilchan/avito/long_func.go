package avito

import (
	"context"
	"fmt"
	"log"
	"time"
)

// –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–æ–ª–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —á–∏—Å–ª–æ.
// –ï—ë —Ç–µ–ª–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å).
// –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ë—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥—É).
// –ï—Å–ª–∏ "–¥–ª–∏–Ω–Ω–∞—è" —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è - –æ—Ç–ª–∏—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
// –ï—Å–ª–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –Ω–µ –≤–∞–∂–µ–Ω.
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (–ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –ª–æ–≥).
// –°–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ë—Ä—Ç–∫–∏ –º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ.

func LongFunc() int {
	time.Sleep(2 * time.Second) //  –∏–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–π —Ä–∞–±–æ—Ç—ã
	return 42
}

func LongFuncWithTimeout(timeout time.Duration) (int, error) {
	start := time.Now()
	resultChan := make(chan int, 1)

	go func() {
		result := LongFunc()
		resultChan <- result
	}()

	select {
	case res := <-resultChan:
		duration := time.Since(start)
		log.Printf("Function completed in %v", duration)
		return res, nil
	case <-time.After(timeout):
		duration := time.Since(start)
		log.Printf("timeout after %s", duration)
		return 0, fmt.Errorf("function timeout after %s", timeout)
	}
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ context.WithTimeout
func LongFuncWithContextTimeout2(timeout time.Duration) (int, error) {
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()

	start := time.Now()
	resultChan := make(chan int, 1)

	go func() {
		res := LongFunc() // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
		select {
		case resultChan <- res: // –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		case <-ctx.Done(): // –Ω–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω–∏–ª—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
		}
	}()

	select {
	case res := <-resultChan:
		log.Printf("Function completed in %v", time.Since(start))
		return res, nil
	case <-ctx.Done():
		log.Printf("Function timed out after %v", time.Since(start))
		return 0, ctx.Err()
	}
}

/*
üîç –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º time.After(timeout) ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π ¬´—Å—Ç—Ä–µ–ª—è–µ—Ç¬ª –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞.
–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ –∏ —á–∏—Ç–∞–µ–º –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª.
–õ–æ–≥–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö (—É—Å–ø–µ—Ö –∏ —Ç–∞–π–º–∞—É—Ç).
–ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è "–∑–∞–≤–∏—Å–ª–∞" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
*/

func main() {
	res, err := LongFuncWithTimeout(1 * time.Second)
	if err != nil {
		log.Printf("Error: %v", err)
	} else {
		log.Printf("Result: %d", res)
	}
}
