package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å N –≥–æ—Ä—É—Ç–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ñ—É–Ω–∫—Ü–∏—é do
// —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥—á–∏—Ç—ã–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–µ–∫—É–Ω–¥ –≤–æ —Å–Ω–µ, –≤—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
// —Ç–∞–∫ –∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∞—è –∏–∑ –≥–æ—Ä—É—Ç–∏–Ω –∑–∞–∫–æ–Ω—á–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∞—è

func do(id, dur int, done chan<- string) {
	sleepDuration := time.Duration(dur) * time.Second
	time.Sleep(sleepDuration)
	done <- fmt.Sprintf("–ì–æ—Ä—É—Ç–∏–Ω–∞ #%d –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ %d —Å–µ–∫—É–Ω–¥", id, dur)
}

func main() {
	const goroutineCount = 5

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	done := make(chan string, goroutineCount)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	durations := make([]int, goroutineCount)
	for i := 0; i < goroutineCount; i++ {
		durations[i] = rand.Intn(5) + 1
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã
	for i := 0; i < goroutineCount; i++ {
		go do(i+1, durations[i], done)
	}

	// –¢–∞–π–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
	ticker := time.NewTicker(1 * time.Second)
	start := time.Now()

	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		msg := <-done // —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fmt.Println("üöÄ –ü–µ—Ä–≤–∞—è –∑–∞–≤–µ—Ä—à–∏–≤—à–∞—è—Å—è:", msg)
		wg.Done()
	}()

	go func() {
		for t := range ticker.C {
			elapsed := int(t.Sub(start).Seconds())
			fmt.Printf("‚åõ –ü—Ä–æ—à–ª–æ %d —Å–µ–∫—É–Ω–¥...\n", elapsed)
		}
	}()

	wg.Wait()
	ticker.Stop()
}
