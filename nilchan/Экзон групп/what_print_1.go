package main

import "fmt"

// –∫–∞–∫–∏–µ —Ç—É—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ –≤—ã–≤–µ–¥–µ—Ç?
// –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã Sprintf –Ω–∞ fmt.Println(elm), –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Sprintf –∏ –ø–æ–ø—Ä–æ—Å–∏–ª —É–∫–∞–∑–∞—Ç—å fmt.Printf("%s;", elm)
// –ë—É–¥–µ—Ç –ª–∏ %s —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä?
// –ö–∞–∫ –≤ –ì–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫ —Å—Ç—Ä–æ–∫–µ?
type MyContainer struct {
	int A
}

func main() {
	arr := []MyContainer{
		{A: 1}, {A: 2}, {A: 3},
	}
	modify(arr)
	for _, elm := range arr {
		fmt.Sprintf("%s;", elm)
		// ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:
		// fmt.Sprintf("%s;", elm)
		// %s –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∞ elm ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ MyContainer, –∞ –Ω–µ string.
		// Go –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é %s.
		// üëâ –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç panic: reflect: call of reflect.Value.String on struct Value, –µ—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç—å.
	}
}

func modify(arr []MyContainer) {
	arr[0].A = 10
	arr = append(arr, MyContainer{A: 4}, MyContainer{A: 5})
}

// ‚úÖ 2. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥ –∫–∞–∫ –µ—Å—Ç—å?
// –ù–∏—á–µ–≥–æ.
// fmt.Sprintf("%s;", elm) —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É, –Ω–æ –æ–Ω–∞ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è ‚Äî Sprintf –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –Ω–æ –µ—ë –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è).

// ‚úÖ 3. –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å Sprintf –Ω–∞ fmt.Println(elm)?
// for _, elm := range arr {
//	fmt.Println(elm)
// }
// –í—ã–≤–æ–¥ –±—É–¥–µ—Ç: {10} {2} {3}
// –ü–æ—á–µ–º—É:
// modify(arr):
// arr[0].A = 10 ‚Üí –∏–∑–º–µ–Ω–∏—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// append(...) –Ω–µ –∏–∑–º–µ–Ω–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–∞–π—Å (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é).
// –í main() –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ [ {10}, {2}, {3} ].

// ‚úÖ 4. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Sprintf?
// s := fmt.Sprintf("%s", val)
// Sprintf ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç Printf, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç –µ—ë).
// %s ‚Äî –¥–ª—è —Å—Ç—Ä–æ–∫.
// %v ‚Äî –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã).
// %+v ‚Äî –ø–æ–∫–∞–∂–µ—Ç –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π.
// %#v ‚Äî –ø–æ–∫–∞–∂–µ—Ç Go-–ª–∏—Ç–µ—Ä–∞–ª (—É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
// ‚úÖ –ü—Ä–∏–º–µ—Ä:
// elm := MyContainer{A: 10}
// fmt.Printf("%v\n", elm)   // {10}
// fmt.Printf("%+v\n", elm)  // {A:10}
// fmt.Printf("%#v\n", elm)  // main.MyContainer{A:10}

// ‚úÖ 5. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å %s —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π?
// –ù–µ—Ç, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç fmt.Stringer –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ç.–µ. –º–µ—Ç–æ–¥:
// func (m MyContainer) String() string {
//	return fmt.Sprintf("MyContainer: %d", m.A)
// }
// –¢–æ–≥–¥–∞ %s –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–∏–º–µ—Ä:
// type MyContainer struct {
//	A int
// }
// func (m MyContainer) String() string {
//	return fmt.Sprintf("A=%d", m.A)
// }
// func main() {
//	m := MyContainer{A: 42}
//	fmt.Printf("%s\n", m) // A=42
// }

// ‚úÖ 6. –ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫ —Å—Ç—Ä–æ–∫–µ –≤ Go?
// üëâ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ String() –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
//
// type Stringer interface {
//	String() string
// }
// –ü—Ä–∏–º–µ—Ä:
// type User struct {
//	Name string
//	Age  int
// }
// func (u User) String() string {
//	return fmt.Sprintf("User{Name: %s, Age: %d}", u.Name, u.Age)
// }

// ‚úÖ –í—ã–≤–æ–¥ –ø–æ –∫–æ–¥—É:
// –û—à–∏–±–∫–∏:
// %s –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å MyContainer, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω String().
// Sprintf(...) –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
// –ò—Å–ø–æ–ª—å–∑—É–π %v –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω —Å–≤–æ–π String().
// –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ ‚Äî —Ä–µ–∞–ª–∏–∑—É–π String().
// append() –≤ modify() –Ω–µ –∏–∑–º–µ–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–∞–π—Å ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π *[]MyContainer.
