package main

import "fmt"

// –¥–∞–Ω–æ –¥–≤–∞ —Å–ª–∞–π—Å–∞, –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–ø–∞—Ä–Ω–æ –≤ –æ–¥–∏–Ω
// –í–∞—Ä–∏–∞–Ω—Ç 1
func main2() {
	s1 := []int{1, 2, 3}
	s2 := []int{4, 5, 6}

	res := make([][2]int, len(s1)) // –¢–∏–ø [][2]int –æ–∑–Ω–∞—á–∞–µ—Ç: —Å–ª–∞–π—Å, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 2 —á–∏—Å–µ–ª.

	for i := range s1 {
		res[i] = [2]int{s1[i], s2[i]}
		/*
		res[0] = [2]int{1, 4}
		res[1] = [2]int{2, 5}
		res[2] = [2]int{3, 6}
		*/
	}
	fmt.Println(res)
}

// –í–∞—Ä–∏–∞–Ω—Ç 2
// –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π—Å–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã

func main() {
	// –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π—Å–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
	//slices := [][]int{
	//	{1, 2, 3},
	//	{4, 5, 6},
	//	{7, 8, 9},
	//}
	slices := [][]int{}

	s1 := []int{1, 2, 3}
	s2 := []int{4, 5, 6}
	s3 := []int{7, 8, 9}

	slices = append(slices, s1)
	slices = append(slices, s2)
	slices = append(slices, s3)

	if len(slices) == 0 {
		return
	}

	length := len(slices[0])
	result := make([][]int, length)

	for i := 0; i < length; i++ {
		group := make([]int, len(slices)) // –Ω–æ–≤—ã–π —Å–ª–∞–π—Å group –¥–ª–∏–Ω–æ–π len(slices)
		for j, s := range slices {
			group[j] = s[i]
			/*
				–ë–µ—Ä—ë–º i-–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π—Å–∞ –∏ –ø–æ–º–µ—â–∞–µ–º –µ–≥–æ –≤ j-—é –ø–æ–∑–∏—Ü–∏—é group.
				üîé –ü—Ä–∏–º–µ—Ä:
				–ù–∞ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (i == 0):
				group[0] = slices[0][0] == 1
				group[1] = slices[1][0] == 4
				group[2] = slices[2][0] == 7
				=> group = []int{1, 4, 7}
			*/
		}
		result[i] = group // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é group –Ω–∞ i-—é –ø–æ–∑–∏—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
	}

	fmt.Println(result) // [[1 4 7] [2 5 8] [3 6 9]]
}
