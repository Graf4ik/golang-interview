package main

import (
	"context"
)

//==========================================
//–ó–∞–¥–∞—á–∞ 1
//–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥? –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
//==========================================

/*
‚ùå –ü—Ä–æ–±–ª–µ–º—ã:
–ö–∞–Ω–∞–ª ch –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî range ch –æ–∂–∏–¥–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞, –Ω–æ main –Ω–∏–∫–æ–≥–¥–∞ –µ–≥–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç ‚Üí –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ.
–ì–æ—Ä—É—Ç–∏–Ω—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ ch <- v*v, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∞ main –Ω–µ —á–∏—Ç–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ, –ø–æ–∫–∞ –≤—Å–µ wg.Done() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é—Ç. –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π deadlock.
–ö–∞–Ω–∞–ª —á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ wg.Wait(), –Ω–æ –≥–æ—Ä—É—Ç–∏–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–∏—Å–∏ –≤ ch.
*/

//func main() {
//	ch := make(chan int, 3) // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
//	wg := &sync.WaitGroup{}
//	wg.Add(3)
//	for i := 0; i < 3; i++ {
//		go func(v int) {
//			defer wg.Done()
//			ch <- v * v
//		}(i)
//	}
//	go func() {
//		wg.Wait()
//		defer close(ch)  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
//	}()
//
//	var sum int
//	for v := range ch {
//		sum += v
//	}
//	fmt.Printf("result: %d\n", sum)
//}

//==========================================
//–ó–∞–¥–∞—á–∞ 2
//–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥? –î–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
//==========================================

/*
–í main() –Ω–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö go fmt.Println(i),
–Ω–µ –¥–æ–∂–¥–∞–≤—à–∏—Å—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:
‚úÖ –ò–Ω–æ–≥–¥–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á–∞—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 0 –¥–æ 4999.
‚ùå –ù–æ —á–∞—â–µ ‚Äî –æ—á–µ–Ω—å –º–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–π –∏–ª–∏ –Ω–∏—á–µ–≥–æ –≤–æ–æ–±—â–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ main() –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ, —á–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã —É—Å–ø–µ—é—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å.
*/

//func main() {
//	a := 5000
//
//	wg := sync.WaitGroup{}
//	wg.Add(a)
//
//	for i := 0; i < a; i++ {
//		go func(i int) {
//			defer wg.Done()
//			fmt.Println(i)
//		}(i)
//	}
//	wg.Wait()
//}

// ===========================================================
// –ó–∞–¥–∞—á–∞ 3
// –ë—É–¥–µ—Ç –æ—à–∏–±–∫–∞ —á—Ç–æ –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ö–∞–∫–∏–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã? –ò –ø–æ—á–µ–º—É?
// ===========================================================

/*
 –í–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ:
ch <- 1 ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç main, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ —Å–ª—É—à–∞–µ—Ç –µ–≥–æ.
–ê go func(...) ‚Äî –¥–∞–∂–µ –Ω–µ –Ω–∞—á–Ω—ë—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ main —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –¥–æ–π–¥—ë—Ç –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã.
–í –∏—Ç–æ–≥–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞ (main) —É–∂–µ —Å—Ç–æ–∏—Ç –Ω–∞ –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –¥—Ä—É–≥–∏—Ö –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
*/
//func main() {
//	ch := make(chan int)
//	// ch <- 1 // ‚ûã main –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å, –æ–∂–∏–¥–∞—è, —á—Ç–æ –∫—Ç–æ-—Ç–æ –ø—Ä–∏–º–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
//	go func() { // ‚ûå —ç—Ç–∞ –≥–æ—Ä—É—Ç–∏–Ω–∞ –ù–ò–ö–û–ì–î–ê –ù–ï –ó–ê–ü–£–°–¢–ò–¢–°–Ø
//		fmt.Println(<-ch)
//	}()
//
//	ch <- 1
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 4
//1. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, —á—Ç–æ –Ω–µ —Ç–∞–∫, —á—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å?
//===========================================================

/*
‚ùó –ü–æ—á–µ–º—É –≤–æ–∑–Ω–∏–∫–∞–µ—Ç deadlock?
–ù–µ–±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç send (ch <- true), –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
–ê –≤—ã –ø–∏—à–µ—Ç–µ –≤ –∫–∞–Ω–∞–ª –¥–æ –∑–∞–ø—É—Å–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –±—ã —á–∏—Ç–∞—Ç—å.
–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: main-–≥–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–∏—Å–∞–µ—Ç, –∞ –≥–æ—Ä—É—Ç–∏–Ω–∞ –¥–∞–∂–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.
Go —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —ç—Ç–æ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–∏–∫—É
*/
//func main() {
//	ch := make(chan bool)
//
//	ch <- true // (2) –ü–´–¢–ê–ï–ú–°–Ø –æ—Ç–ø—Ä–∞–≤–∏—Ç—å true ‚Äî –Ω–æ –ù–ò–ö–¢–û –Ω–µ —á–∏—Ç–∞–µ—Ç!
//	// üí• DEADLOCK –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ: main –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è, –∞ –≥–æ—Ä—É—Ç–∏–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!
//
//	go func() {
//		<-ch // (3) –ì–æ—Ä—É—Ç–∏–Ω–∞ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å ‚Äî –Ω–æ –¥–æ –Ω–µ—ë –¥–µ–ª–æ –Ω–µ –¥–æ—à–ª–æ
//	}()
//	ch <- true

// –í–∞—Ä–∏–∞–Ω—Ç 1
// ch := make(chan bool)

//go func() {
//	<-ch
//	<-ch
//}()
//
//ch <- true
//ch <- true

// –í–∞—Ä–∏–∞–Ω—Ç 2
//ch := make(chan bool, 2) // –±—É—Ñ–µ—Ä –Ω–∞ 2 –∑–Ω–∞—á–µ–Ω–∏—è
//
//ch <- true  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ‚Äî –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
//ch <- true  // —Ç–æ–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
//
//go func() {
//	<-ch
//	<-ch
//}()
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 5
//1. –ö–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥?
//2. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π ch?
//===========================================================

//func main() {
//	ch := make(chan bool)
//	ch2 := make(chan bool)
//	ch3 := make(chan bool)
//
//	// –í–∞—Ä–∏–∞–Ω—Ç 1: –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –≥–æ—Ä—É—Ç–∏–Ω—É (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å)
//	// –í–∞—Ä–∏–∞–Ω—Ç 2: –∑–∞–¥–µ—Ä–∂–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—É—Ç–∏–Ω—ã —Å –ø–æ–º–æ—â—å—é time.Sleep
//	go func() {
//		time.Sleep(100 * time.Millisecond)
//		ch <- true
//	}()
//	go func() {
//		time.Sleep(100 * time.Millisecond)
//		ch2 <- true
//	}()
//	go func() {
//		ch3 <- true
//	}()
//
//	/*
//	select –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π case, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
//	–ü–æ—ç—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–µ–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º: –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏—Å—å:
//	*/
//	select {
//	case <-ch:
//		fmt.Printf("val from ch")
//	case <-ch2:
//		fmt.Printf("val from ch2")
//	case <-ch3:
//		fmt.Printf("val from ch3")
//	}
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 6
//1. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥ –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?
//===========================================================

/*
üß® –ü—Ä–æ–±–ª–µ–º—ã
‚ùó –ì–æ–Ω–∫–∞ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π a
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è a –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ç—Ä—ë—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
–≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≥–æ–Ω–∫—É –¥–∞–Ω–Ω—ã—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º.
–ó–Ω–∞—á–µ–Ω–∏–µ a –≤ —Ñ–∏–Ω–∞–ª–µ (fmt.Printf("%d", a)) –±—É–¥–µ—Ç –ª—é–±–æ–µ –∏–∑ —Ç—Ä—ë—Ö (10, 11 –∏–ª–∏ 12), –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–π—Ç.
‚ùó –ì–æ–Ω–∫–∞ –ø–æ globalMap["test"] –∏ –¥—Ä—É–≥–∏–º —Å–ª–∞–π—Å–∞–º
append –Ω–∞ —Å–ª–∞–π—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π.
–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ []int –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö.
*/
//var globalMap = map[string][]int{"test": make([]int, 0), "test2": make([]int, 0), "test3": make([]int, 0)}
//var a = 0
//var mu sync.Mutex
//
//func main() {
//	wg := sync.WaitGroup{}
//	wg.Add(3)
//	go func() {
//		mu.Lock()
//		defer wg.Done()
//		a = 10
//		globalMap["test"] = append(globalMap["test"], a)
//		mu.Unlock()
//
//	}()
//	go func() {
//		mu.Lock()
//		defer wg.Done()
//		a = 11
//		globalMap["test2"] = append(globalMap["test2"], a)
//		mu.Unlock()
//	}()
//	go func() {
//		mu.Lock()
//		defer wg.Done()
//		a = 12
//		globalMap["test3"] = append(globalMap["test3"], a)
//		mu.Unlock()
//	}()
//	wg.Wait()
//	fmt.Printf("%v", globalMap)
//	fmt.Printf("%d", a)
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 7
//===========================================================

type Result struct{}

type SearchFunc func(ctx context.Context, query string) (Result, error)

/*
–ü–æ—è—Å–Ω–µ–Ω–∏–µ:
–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –æ–Ω –æ—Ç–¥–∞–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É.
–û—à–∏–±–∫–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è, –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—Å–µ SearchFunc –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.
ctx –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∏–∑–≤–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º).
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å time.After(...), –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–º–∏–º–æ ctx.
*/
//func MultiSearch(ctx context.Context, query string, sfs []SearchFunc) (Result, error) {
//
//	// –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ query –≤–æ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö SearchFunc
//	// –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ—Ç–¥–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É. –ï—Å–ª–∏ –≤—Å–µ SearchFunc –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏
//	// —Å –æ—à–∏–±–∫–æ–π - –æ—Ç–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
//
//	errCh := make(chan error, len(sfs))
//	results := make(chan Result, len(sfs))
//
//	wg := sync.WaitGroup{}
//	wg.Add(len(sfs))
//
//	for _, sf := range sfs {
//		go func(sf SearchFunc) {
//			defer wg.Done()
//
//			res, err := sf(ctx, query)
//			if err != nil {
//				errCh <- err
//				return
//			}
//
//			// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç
//			select {
//			case results <- res:
//			default:
//			}
//		}(sf)
//	}
//
//	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
//	go func() {
//		wg.Wait()
//		defer close(errCh)
//		defer close(results)
//	}()
//
//	// –∂–¥–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏
//	select {
//	case res := <-results:
//		return res, nil
//	case <-ctx.Done():
//		return Result{}, ctx.Err()
//	case <-time.After(100 * time.Millisecond): // safety net timeout, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
//	}
//
//	// –í—Å–µ –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
//	var lastErr error
//	for err := range errCh {
//		lastErr = err
//	}
//
//	return Result{}, lastErr
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 8
//1. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?
//===========================================================

/*
–¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:
–ù–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω.
–ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ counter.
–õ–∏–±–æ —á–µ—Ä–µ–∑ mutex –ª–∏–±–æ —á–µ—Ä–µ–∑ atomic
*/

//func main() {
//	// var counter int
//	var counter int32
//	wg := sync.WaitGroup{}
//	// mu := sync.Mutex{}
//
//	//for i := 0; i < 1000; i++ {
//	//	wg.Add(1)
//	//	go func() {
//	//		defer wg.Done()
//	//		mu.Lock()
//	//		counter++
//	//		mu.Unlock()
//	//	}()
//	//}
//
//	for i := 0; i < 1000; i++ {
//		wg.Add(1)
//		go func() {
//			defer wg.Done()
//			atomic.AddInt32(&counter, 1)
//		}()
//	}
//
//	wg.Wait()
//	fmt.Println(counter)
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 9
//1. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?
//2. –ß—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫?
//===========================================================

/*
–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π i: –ü–µ—Ä–µ–¥–∞–µ–º i –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
–≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω sync.WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
–ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∫–∞–∫ –æ—á–µ—Ä–µ–¥—å
–í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ (main), —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
–î—Ä—É–≥–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω defer –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ wg.Done()
–ò—Å–ø–æ–ª—å–∑—É–µ–º range –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
*/
// –í–∞—Ä–∏–∞–Ω—Ç 1
//func main() {
//	m := make(chan string, 5) // –ë—É—Ñ–µ—Ä –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//	cnt := 5
//	for i := 0; i < cnt; i++ {
//		go func() {
//			m <- fmt.Sprintf("Goroutine %d", i)
//		}()
//	}
//	for i := 0; i < cnt; i++ {
//		fmt.Println(<-m)
//	}
//}

// –í–∞—Ä–∏–∞–Ω—Ç 2
//	func main() {
//		m := make(chan string, 3)
//		cnt := 5
//
//		var wg sync.WaitGroup
//
//		for i := 0; i < cnt; i++ {
//			wg.Add(1)
//			go func(id int) {
//				defer wg.Done()
//				m <- fmt.Sprintf("Goroutine %d", id)
//			}(i) // –ü–µ—Ä–µ–¥–∞–µ–º i –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
//		}
//  	// –ü–æ–ª—É—á–µ–Ω–∏–µ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å main)
//		go func() {
//			wg.Wait()
//			close(m)
//		}()
//
//		for msg := range m {
//			fmt.Println(msg)
//		}

//    	// –í—ã–≤–æ–¥ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª)
//		//for i := 0; i < cnt; i++ {
//		//	go ReceiveFromCh(m)
//		//}
//	}
//func ReceiveFromCh(ch chan string) {
//	fmt.Println(<-ch)
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 10
//1. Merge n channels
//2. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
//===========================================================

//func case3(channels ...chan int) chan int {
//	out := make(chan int)
//
//	var wg sync.WaitGroup
//	wg.Add(len(channels))
//
//	for _, ch := range channels {
//		go func() {
//			defer wg.Done()
//			for v := range ch {
//				out <- v
//			}
//		}()
//	}
//
//	go func() {
//		wg.Wait()
//		close(out)
//
//		for _, c := range channels {
//			select {
//			case _, ok := <-c:
//				if ok {
//					close(c)
//				}
//			default:
//				close(c)
//			}
//		}
//	}()
//
//	return out
//}

//func mergeChannelsWithCancel(channels ...chan int) chan int {
//	out := make(chan int)
//	ctx, cancel := context.WithCancel(context.Background())
//	var wg sync.WaitGroup
//
//	forward := func(c chan int) {
//		defer wg.Done()
//		for {
//			select {
//			case num, ok := <-c:
//				if !ok {
//					cancel() // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª—é–±–æ–≥–æ –∫–∞–Ω–∞–ª–∞
//					return
//				}
//				out <- num
//			case <-ctx.Done():
//				return
//			}
//		}
//	}
//
//	wg.Add(len(channels))
//	for _, c := range channels {
//		go forward(c)
//	}
//
//	go func() {
//		wg.Wait()
//		close(out)
//		cancel()
//		for _, c := range channels {
//			close(c)
//		}
//	}()
//
//	return out
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 11
//	1. –û–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞–º–∏. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –µ—Å—Ç—å –º–µ—Ç–æ–¥ REST API. –í –Ω–µ–º –º—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥—Ä—É–≥–∏–º API.
//	–ù—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ  –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç?
//	–°—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –º–æ–∂–Ω–æ WaitGroup?
//===========================================================

//===========================================================
//–ó–∞–¥–∞—á–∞ 12
//1. –ö–æ–Ω—É—Ä–µ–Ω—Ç–Ω–æ –ø–æ –±–∞—Ç—á–∞–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª. –ù—É–∂–Ω–∞ –æ–±—â–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É –∏ –≤—ã–≥—Ä—É–∑–∫—É –≤ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å.
//2. –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –Ω–µ –±–æ–ª–µ–µ chunkSize –∑–∞–ø—Ä–æ—Å–æ–≤.
//===========================================================
/*
 –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
sem := make(chan struct{}, chunkSize) ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω (–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø—Ä–æ—Å–æ–≤).
worker ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ id, –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
wg ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤.
fetchData –∏ saveData ‚Äî –∑–∞–≥–ª—É—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.

*/
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
//const (
//	urlTemplate = "http://jsonplaceholder.typicode.com/tools/%d"
//	chunkSize   = 100
//	dataCount   = 2 << 10 // 2048
//)
//
//// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (—ç–º—É–ª—è—Ü–∏—è)
//func fetchData(id int) (string, error) {
//	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
//	// resp, err := http.Get(fmt.Sprintf(urlTemplate, id))
//	// defer resp.Body.Close()
//	// –ù–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É:
//	return fmt.Sprintf("Data for ID %d", id), nil
//}
//
//// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±—É—Ñ–µ—Ä –∏ –ø–æ—Ç–æ–º —Å–ª–∏—Ç—å –≤ —Ñ–∞–π–ª)
//func saveData(id int, data string) error {
//	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –∫–∞–Ω–∞–ª
//	fmt.Printf("Saving ID %d: %s\n", id, data)
//	return nil
//}
//
//func worker(id int, wg *sync.WaitGroup, sem chan struct{}) {
//	defer wg.Done()
//
//	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω
//	sem <- struct{}{}        // –±–ª–æ–∫–∏—Ä—É–µ–º
//	defer func() { <-sem }() // —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
//
//	// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
//	data, err := fetchData(id)
//	if err != nil {
//		fmt.Printf("Error fetching ID %d: %v\n", id, err)
//		return
//	}
//
//	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
//	err = saveData(id, data)
//	if err != nil {
//		fmt.Printf("Error saving ID %d: %v\n", id, err)
//	}
//}
//
//func main() {
//	var wg sync.WaitGroup
//	sem := make(chan struct{}, chunkSize) // —Å–µ–º–∞—Ñ–æ—Ä –Ω–∞ chunkSize –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
//
//	for i := 1; i <= dataCount; i++ {
//		wg.Add(1)
//		go worker(i, &wg, sem)
//	}
//
//	wg.Wait()
//	fmt.Println("All done.")
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 13
//1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ –≤—Å–µ –≥–¥–µ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å nil.
//2. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç int. –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è resp.Size(), –¥–ª—è –∫–∞–∂–¥–æ–≥–æ url
//–Ω–∞–¥–æ –ø—Ä–æ—Å—Å—É–º–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é
//3. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É—Ä–ª–æ–≤ —É –Ω–∞—Å –º–∏–ª–ª–∏–æ–Ω—ã?
//
//===========================================================

//func main() {
//	_, err := download([]string{
//		"https://example.com/e25e26d3-6aa3-4d79-9ab4-fc9b71103a8c.xml",
//		"https://example.com/a601590e-31c1-424a-8ccc-decf5b35c0f6.xml",
//		"https://example.com/1cf0dd69-a3e5-4682-84e3-dfe22ca771f4.xml",
//		"https://example.com/ceb566f2-a234-4cb8-9466-4a26f1363aa8.xml",
//		"https://example.com/b6ed16d7-cb3d-4cba-b81a-01a789d3a914.xml",
//	})
//
//	if err != nil {
//		panic(err)
//	}
//}
//
//const maxWorkers = 100
/*
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É ‚Äî –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, –∏–Ω–∞—á–µ nil.
–ü–æ–¥—Ö–æ–¥:
–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—á–µ—Ä–µ–∑ –≥–æ—Ä—É—Ç–∏–Ω—ã).
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sync.WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö.
–°—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ atomic.
–ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π ‚Äî –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É.
*/

/*
–¢–µ–ø–µ—Ä—å download() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å int ‚Äî —Å—É–º–º—É resp.Size(), –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫.
–ü–æ–¥—Ö–æ–¥:
–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ resp.Size() ‚Äî —ç—Ç–æ —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, len(body)).
–°–æ–∑–¥–∞—ë–º totalSize int32/int64, –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ (atomic.AddInt64()).
–ï—Å–ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë.
–ï—Å–ª–∏ –≤—Å–µ —Å –æ—à–∏–±–∫–æ–π ‚Äî –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É.
*/

//func download(urls []string) (int64, error) {
//	var wg sync.WaitGroup
//	var errorCount int32
//	var totalSize int64
//
//	for _, url := range urls {
//		wg.Add(1)
//		go func(url string) {
//			defer wg.Done()
//			resp, err := http.Get(url)
//			if err != nil || resp.StatusCode != http.StatusOK {
//				atomic.AddInt32(&errorCount, 1)
//				return
//			}
//			defer resp.Body.Close()
//
//			size := resp.ContentLength
//			if size > 0 {
//				atomic.AddInt64(&totalSize, size)
//			}
//		}(url)
//	}
//
//	wg.Wait()
//
//	if int(errorCount) == len(urls) {
//		return 0, errors.New("all requests failed")
//	}
//
//	return totalSize, nil
//}

/*
–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ URL-–æ–≤ –º–∏–ª–ª–∏–æ–Ω—ã?
–ü–æ–¥—Ö–æ–¥:
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞:
–°–æ–∑–¥–∞—Ç—å —Å–µ–º–∞—Ñ–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, workerPool := make(chan struct{}, maxWorkers)), —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã –≥–æ—Ä—É—Ç–∏–Ω.
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —á–∞–Ω–∫–∞–º –∏–ª–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å:
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å worker pool + –∫–∞–Ω–∞–ª –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ URL-–æ–≤.
–í–æ–∑–º–æ–∂–µ–Ω –ø–æ–¥—Ö–æ–¥ —Å batching + –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, response body) –∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
*/

//func download(urls []string) (int64, error) {
//	wg := sync.WaitGroup{}
//	wg.Add(len(urls))
//
//	var totalSize int64
//	var errorCount int32
//
//	jobs := make(chan string, len(urls))
//
//	// –í–æ—Ä–∫–µ—Ä—ã
//	for i := 0; i < maxWorkers; i++ {
//		wg.Add(1)
//		go func() {
//			defer wg.Done()
//			for url := range jobs {
//				resp, err := http.Get(url)
//				if err != nil || resp.StatusCode != http.StatusOK {
//					atomic.AddInt32(&errorCount, 1)
//					continue
//				}
//				size := resp.ContentLength
//				if size > 0 {
//					atomic.AddInt64(&totalSize, size)
//				}
//				resp.Body.Close()
//			}
//		}()
//	}
//
//	wg.Wait()
//
//	for _, url := range urls {
//		jobs <- url
//	}
//
//	close(jobs)
//
//	if int(errorCount) == len(urls) {
//		return 0, errors.New("all requests failed")
//	}
//
//	return totalSize, nil
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 14
//1. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å?
//2. –ù—É–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –±—ã—Å—Ç—Ä–µ–µ. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–ø–µ—Ä—å?
//3. –ï—Å–ª–∏ –±—ã –≤ networkRequest –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –≤—ã–∑–æ–≤, —Ç–æ –∫–∞–∫–∏–µ —Å –∫–∞–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –º—ã –º–æ–≥–ª–∏ –±—ã —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–¥–µ?
//4. –ï—Å–ª–∏ url –Ω–µ–º–Ω–æ–≥–æ, –∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–∏–º –º–Ω–æ–≥–æ, —Ç–æ –∫–∞–∫ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
//===========================================================

/*
1. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–∏–º–∞–µ—Ç ~1 –º—Å (time.Sleep(time.Millisecond))
–ó–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–≥–æ—Ä—É—Ç–∏–Ω—ã)
–û—Å–Ω–æ–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU –∏ contention –Ω–∞ –º—å—é—Ç–µ–∫—Å–µ
–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: 100-500 –º—Å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç CPU)
*/

/*
2. –ö–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å?
–ü—Ä–æ–±–ª–µ–º—ã —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
–ú—å—é—Ç–µ–∫—Å —Å–æ–∑–¥–∞–µ—Ç contention –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–µ —Å—á–µ—Ç—á–∏–∫–∞
–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ—Ä—É—Ç–∏–Ω (10k) —Å–æ–∑–¥–∞—é—Ç overhead
–£–ª—É—á—à–µ–Ω–∏—è:
atomic.Int32 –≤–º–µ—Å—Ç–æ –º—å—é—Ç–µ–∫—Å–∞
–°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (100 –≥–æ—Ä—É—Ç–∏–Ω)
–£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä—É—Ç–∏–Ω
*/

/*
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç–µ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
–ù–µ—Ç —Ç–∞–π–º–∞—É—Ç–æ–≤:
–ó–∞–≤–∏—Å—à–∏–π –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–æ—Ä—É—Ç–∏–Ω—É –Ω–∞–≤—Å–µ–≥–¥–∞
–†–µ—à–µ–Ω–∏–µ: context.WithTimeout
–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:
–û—à–∏–±–∫–∏ —Å–µ—Ç–∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
–†–µ—à–µ–Ω–∏–µ: –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏ –∏–∑ networkRequest
–ù–µ—Ç retry –ª–æ–≥–∏–∫–∏:
–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–±–æ–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –ø–æ—Ç–µ—Ä–µ –∑–∞–ø—Ä–æ—Å–æ–≤
–†–µ—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏—Ç—å retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏:
–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
–†–µ—à–µ–Ω–∏–µ: rate limiting (–Ω–∞–ø—Ä–∏–º–µ—Ä, golang.org/x/time/rate)
–ù–µ—Ç circuit breaker:
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –ø–æ—Å—ã–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
–†–µ—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Circuit Breaker
*/

/*
–ï—Å–ª–∏ URL –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è:
–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤:
var cache = sync.Map{}
func networkRequest(url string) {
	if val, ok := cache.Load(url); ok {
		return val
	}
	// ... –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	cache.Store(url, result)
}
–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å http.Client —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Transport
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å keep-alive —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
–ü–∞–∫–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:
–û–±—ä–µ–¥–∏–Ω—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ batch
–ü—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /user/1, —Å–¥–µ–ª–∞—Ç—å 1 –∑–∞–ø—Ä–æ—Å –∫ /users?ids=1,2,3...
–®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤:
var urlShards = make([]chan string, 10)
// –ö–∞–∂–¥–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–π shard
*/

//const numRequests = 10000
//
//var count atomic.Int32 // –ê—Ç–æ–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
//// var count int
//var cache sync.Map
//var m sync.Mutex
//
//func networkRequest() {
//	time.Sleep(time.Millisecond) // –≠–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
//	m.Lock()
//	count++
//	m.Unlock()
//}
//
//func main() {
//	var wg sync.WaitGroup
//
//	wg.Add(numRequests)
//
//	sem := make(chan struct{}, 100) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
//	urls := generateUrls()          // []string —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
//
//	for _, url := range urls {
//		sem <- struct{}{}
//		go func(u string) {
//			defer func() { <-sem }()
//
//			if _, ok := cache.Load(u); ok {
//				return
//			}
//
//			ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
//			defer cancel()
//
//			if err := realNetworkRequest(ctx, u); err == nil {
//				cache.Store(u, true)
//				count.Add(1)
//			}
//		}(url)
//	}

// –í–∞—Ä–∏–∞–Ω—Ç 1
//for i := 0; i < numRequests; i++ {
//	sem <- struct{}{}
//	go func() {
//		defer func() {
//			wg.Done()
//			<-sem
//		}()
//		networkRequest()
//	}()
//}

//wg.Wait()
//fmt.Println(count)
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 15
//
//===========================================================

// –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è unpredictableFunc, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–æ–ª–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —á–∏—Å–ª–æ.
// –ï—ë —Ç–µ–ª–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å).

// –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±–µ—Ä—Ç–∫—É predictableFunc,
// –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥—É).

//func init() {
//	rand.Seed(time.Now().UnixNano())
//}

// –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–æ–ª–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —á–∏—Å–ª–æ.
// –ï—ë —Ç–µ–ª–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å).
//func unpredictableFunc() int64 {
//	rnd := rand.Int63n(5000)
//	time.Sleep(time.Duration(rnd) * time.Millisecond)
//
//	return rnd
//}

// –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–µ—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥—É).
// –ï—Å–ª–∏ "–¥–ª–∏–Ω–Ω–∞—è" —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è - –æ—Ç–ª–∏—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
// –ï—Å–ª–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –Ω–µ –≤–∞–∂–µ–Ω.
//
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (–ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –ª–æ–≥).
// –°–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ë—Ä—Ç–∫–∏ –º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ.

// –í–∞—Ä–∏–∞–Ω—Ç 1
//func predictableFunc() (int64, error) {
//	resultChan := make(chan int64, 1)
//	start := time.Now()
//	go func() {
//		resultChan <- unpredictableFunc()
//	}()
//
//	select {
//	case result := <-resultChan:
//		elapsed := time.Since(start)
//		fmt.Printf("Function executed in %v\n", elapsed)
//		return result, nil
//	case <-time.After(1 * time.Second):
//		return 0, fmt.Errorf("timeout after 1 second")
//	}
//}

// –í–∞—Ä–∏–∞–Ω—Ç 2
//func predictableFunc() (int64, error) {
//	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
//	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
//	defer cancel() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
//
//	// –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//	resultChan := make(chan int64, 1)
//
//	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç
//	start := time.Now()
//	go func() {
//		resultChan <- unpredictableFunc()
//	}()
//
//	// –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
//	select {
//	case result := <-resultChan:
//		elapsed := time.Since(start)
//		fmt.Printf("Function executed in %v\n", elapsed)
//		return result, nil
//	case <-ctx.Done():
//		return 0, ctx.Err() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞
//	}
//}

//func main() {
//	fmt.Println("started")
//
//	if result, err := predictableFunc(); err != nil {
//		fmt.Println("Error:", err)
//	} else {
//		fmt.Println("Result:", result)
//	}
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 16
//===========================================================

// –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç merge N –∫–∞–Ω–∞–ª–æ–≤. –í–µ—Å—å –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.

//func merge(cs ...<-chan int) <-chan int {
//	out := make(chan int)
//	var wg sync.WaitGroup
//	wg.Add(len(cs))
//
//	for _, c := range cs {
//		go func() {
//			defer wg.Done()
//			for ch := range c {
//				out <- ch
//			}
//		}()
//	}
//
//	go func() {
//		wg.Wait()
//		close(out)
//	}()
//
//	return out
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 17
//1. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è? –ò—Å–ø—Ä–∞–≤—å –ø—Ä–æ–±–ª–µ–º—É
//===========================================================

// # –í–∞—Ä–∏–∞–Ω—Ç1
// ----------
//func main() {
//	x := make(map[int]int, 1)
//	mu := sync.Mutex{}
//
//	go func() {
//		mu.Lock()
//		defer mu.Unlock()
//		x[1] = 2
//	}()
//	go func() {
//		mu.Lock()
//		defer mu.Unlock()
//		x[1] = 7
//	}()
//	go func() {
//		mu.Lock()
//		defer mu.Unlock()
//		x[1] = 10
//	}()
//	time.Sleep(100 * time.Millisecond)
//	fmt.Println("x[1] =", x[1])
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 18
//1. –ò–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω—É–ª–∏. –í —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞? –ò—Å–ø—Ä–∞–≤—å –µ–µ
//2. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è bank_network_call –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥, —Ç–æ –∑–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è balance()? –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É?
//3. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ bank_network_call –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, —Ç–æ balance –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É.
//===========================================================

/*
–ü–æ—è—Å–Ω–µ–Ω–∏—è:
1. –ü–æ—á–µ–º—É —Ä–∞–Ω—å—à–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –Ω—É–ª–∏?
–ì–æ—Ä—É—Ç–∏–Ω—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∏ balance() –º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –∑–∞–ø–∏—à—É—Ç –¥–∞–Ω–Ω—ã–µ –≤ x.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –î–æ–±–∞–≤–ª–µ–Ω sync.WaitGroup, –∫–æ—Ç–æ—Ä—ã–π –±–ª–æ–∫–∏—Ä—É–µ—Ç balance() –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω.
2. –°–∫–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è balance(), –µ—Å–ª–∏ bank_network_call –∑–∞–Ω–∏–º–∞–µ—Ç 5 —Å–µ–∫—É–Ω–¥?
–í—Å–µ 5 –≤—ã–∑–æ–≤–æ–≤ bank_network_call –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É balance() –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∑–∞ ~5 —Å–µ–∫—É–Ω–¥ (–∞ –Ω–µ –∑–∞ 25, –µ—Å–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã —à–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ).
3. –ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—à–∏–±–∫–∏?
–ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω bank_network_call –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É, –æ–Ω–∞ –ø–æ–ø–∞–¥–µ—Ç –≤ errCh.

–ü–æ—Å–ª–µ wg.Wait() –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë.
–ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
–ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫ (errCh):
–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ = 5, —á—Ç–æ–±—ã –≥–æ—Ä—É—Ç–∏–Ω—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–æ–∫.
defer wg.Done():
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ WaitGroup —É–º–µ–Ω—å—à–∏—Ç —Å—á–µ—Ç—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –ø–∞–Ω–∏–∫–µ.
close(errCh) –ø–æ—Å–ª–µ wg.Wait():
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å range –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫.
*/

// –í–∞—Ä–∏–∞–Ω—Ç 1
//func balance() (int, error) { // 25 sec
//	x := make(map[int]int, 1)
//	var m sync.Mutex
//
//	wg := sync.WaitGroup{}
//	errCh := make(chan error, 5)
//
//	// call bank
//	for i := 0; i < 5; i++ {
//		//i := i
//		wg.Add(1)
//		go func(num int) {
//			defer wg.Done()
//			m.Lock()
//			b, err := bank_network_call(num)
//			if err != nil {
//				errCh <- err
//				return
//			}
//
//			x[num] = b
//			m.Unlock()
//		}(i)
//	}
//
//	wg.Wait()
//	close(errCh)
//
//	for err := range errCh {
//		return 0, err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
//	}
//
//	sum := 0
//	for _, v := range x {
//		sum += v
//	}
//	// –ö–∞–∫-—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞–ø–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
//	return sum, nil
//}

// –í–∞—Ä–∏–∞–Ω—Ç 2 (c errgroup)

//func balance() (int, error) {
//	x := make(map[int]int, 5)
//	var m sync.Mutex
//	g := new(errgroup.Group)
//
//	// –ó–∞–ø—É—Å–∫–∞–µ–º 5 –≥–æ—Ä—É—Ç–∏–Ω —á–µ—Ä–µ–∑ errgroup
//	for i := 0; i < 5; i++ {
//		i := i // –§–∏–∫—Å–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ i –¥–ª—è –≥–æ—Ä—É—Ç–∏–Ω—ã
//		g.Go(func() error {
//			b, err := bank_network_call(i)
//			if err != nil {
//				return err // –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ—Ä–≤–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
//			}
//
//			m.Lock()
//			x[i] = b
//			m.Unlock()
//			return nil
//		})
//	}
//
//	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω. –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë.
//	if err := g.Wait(); err != nil {
//		return 0, err
//	}
//
//	// –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É
//	sum := 0
//	for _, v := range x {
//		sum += v
//	}
//	return sum, nil
//}

//===========================================================
//–ó–∞–¥–∞—á–∞ 19
//–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥ –∏ –ø–æ—á–µ–º—É?
//===========================================================

/*
–ü—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ:
–ì–æ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö (Data Race)
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ch –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ –¥–≤—É—Ö –≥–æ—Ä—É—Ç–∏–Ω (main –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π) –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
–≠—Ç–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä/–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–æ–≥—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è ch –≤ –æ–¥–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ –Ω–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –¥—Ä—É–≥–æ–π.
runtime.GOMAXPROCS(1)
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —è–¥—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Go –º–æ–∂–µ—Ç –≤–æ–æ–±—â–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏, –ø–æ–∫–∞ main –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º –≤—ã–∑–æ–≤–µ).
–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ main –∑–∞–Ω—è—Ç –∞–∫—Ç–∏–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º (for ch == 0), –ø–æ—ç—Ç–æ–º—É –≥–æ—Ä—É—Ç–∏–Ω–∞ ch = 1 –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è.
–ê–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª (busy loop)
–¶–∏–∫–ª for ch == 0 –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –ø–æ—ç—Ç–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Go –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ.
–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞?

–í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª (–≥–æ—É—Ç–∏–Ω–∞ ch = 1 –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ).
–í–∞—Ä–∏–∞–Ω—Ç 2 (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏): –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –≤—ã–≤–æ–¥–æ–º "finish", –µ—Å–ª–∏ –≥–æ—Ä—É—Ç–∏–Ω–∞ ch = 1 –≤—Å–µ –∂–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è (–Ω–æ —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏ GOMAXPROCS(1)).
*/

//func main() {
//	runtime.GOMAXPROCS(1)
//	ch := 0
//	go func() {
//		ch = 1
//	}()
//	for ch == 0 {
//	}
//	fmt.Println("finish")
//}
