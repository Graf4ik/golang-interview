package concurency

import (
	"fmt"
	"sync"
)

//===========================================================
//–ó–∞–¥–∞—á–∞ 6
//1. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥ –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?
//===========================================================

/*
üß® –ü—Ä–æ–±–ª–µ–º—ã
‚ùó –ì–æ–Ω–∫–∞ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π a
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è a –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ç—Ä—ë—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
–≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≥–æ–Ω–∫—É –¥–∞–Ω–Ω—ã—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º.
–ó–Ω–∞—á–µ–Ω–∏–µ a –≤ —Ñ–∏–Ω–∞–ª–µ (fmt.Printf("%d", a)) –±—É–¥–µ—Ç –ª—é–±–æ–µ –∏–∑ —Ç—Ä—ë—Ö (10, 11 –∏–ª–∏ 12), –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–π—Ç.
‚ùó –ì–æ–Ω–∫–∞ –ø–æ globalMap["test"] –∏ –¥—Ä—É–≥–∏–º —Å–ª–∞–π—Å–∞–º
append –Ω–∞ —Å–ª–∞–π—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π.
–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ []int –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö.
*/

var globalMap = map[string][]int{"test": make([]int, 0), "test2": make([]int, 0), "test3": make([]int, 0)}
var a = 0
var mu sync.Mutex

func main() {
	wg := sync.WaitGroup{}
	wg.Add(3)
	go func() {
		mu.Lock()
		defer wg.Done()
		a = 10
		globalMap["test"] = append(globalMap["test"], a)
		mu.Unlock()

	}()
	go func() {
		mu.Lock()
		defer wg.Done()
		a = 11
		globalMap["test2"] = append(globalMap["test2"], a)
		mu.Unlock()
	}()
	go func() {
		mu.Lock()
		defer wg.Done()
		a = 12
		globalMap["test3"] = append(globalMap["test3"], a)
		mu.Unlock()
	}()
	wg.Wait()
	fmt.Printf("%v", globalMap)
	fmt.Printf("%d", a)
}
