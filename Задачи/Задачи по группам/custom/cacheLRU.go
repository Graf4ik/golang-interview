package main

import "sync"

//===========================================================
//–ó–∞–¥–∞—á–∞ 6
//1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–µ—à. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥—É–º—ã–≤–∞—Ç—å—Å—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –∏–∑ –Ω–µ–≥–æ.
//1. –ü–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª RWMutex, –∞ –Ω–µ Mutex?
//2. –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –ø–∞–º—è—Ç—å –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è. –° –∫–∞–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å—Ç–æ–ª–∫–Ω–µ–º—Å—è –∏ –∫–∞–∫ –∏—Ö —Ä–µ—à–∏—Ç—å?
//1. –ö–∞–∫–∏–µ –µ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã—Å–µ–ª–µ–Ω–∏—è?
//3. –†–µ–∞–ª–∏–∑—É–π LRU
//===========================================================

// In-memory cache
// –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É in-memory cache.
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:

type Cache interface {
	Set(k, v string)
	Get(k string) (v string, ok bool)
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é (–ø—Ä–æ—Å—Ç–æ–π in-memory cache)

//type InMemoryCache struct {
//	data map[string]string
//	mu   sync.RWMutex
//}
//
//func (c *InMemoryCache) Set(k, v string) {
//	c.mu.Lock()
//	defer c.mu.Unlock()
//	c.data[k] = v
//}
//
//func (c *InMemoryCache) Get(k string) (v string, ok bool) {
//	c.mu.RLock()
//	defer c.mu.Unlock()
//	v, ok = c.data[k]
//	return v, ok
//}

/*
‚ùì 2. –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è ‚Äî —Å –∫–∞–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å—Ç–æ–ª–∫–Ω—ë–º—Å—è?
–ü–∞–º—è—Ç—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—å—Å—è, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –ø–æ—Ç–æ–∫–µ Set.

–°—Ç–∞—Ä—ã–µ, –¥–∞–≤–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏ –º–æ–≥—É—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –ø–∞–º—è—Ç–∏, –∑–∞—Å–æ—Ä—è—è –µ—ë.

‚úÖ –†–µ—à–µ–Ω–∏—è:
–í–≤–µ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞.

–£–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –≤—ã—Å–µ–ª–µ–Ω–∏—è.
*/

/*
‚ùì 2.1. –ö–∞–∫–∏–µ –µ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã—Å–µ–ª–µ–Ω–∏—è?
–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:

–ê–ª–≥–æ—Ä–∏—Ç–º	–°—É—Ç—å
LRU (Least Recently Used)	–£–¥–∞–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω–µ–µ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
LFU (Least Frequently Used)	–£–¥–∞–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
FIFO (First In First Out)	–£–¥–∞–ª—è–µ—Ç—Å—è —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π
Random Replacement	–£–¥–∞–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
*/

type node struct {
	key, value string
	prev, next *node
}

type LRUCache struct {
	capacity   int
	mu         sync.Mutex
	items      map[string]*node
	head, tail *node // most recently used, least recently used
}

func NewLRUCache(capacity int) *LRUCache {
	return &LRUCache{
		capacity: capacity,
		items:    make(map[string]*node, capacity),
	}
}

func (c *LRUCache) Get(key string) (string, bool) {
	c.mu.Lock()
	defer c.mu.Unlock()

	if n, ok := c.items[key]; ok { // ok ‚Äî true, –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, false ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç.
		c.moveToFront(n)
		return n.value, true
	}

	/*
		–û–∑–Ω–∞—á–∞–µ—Ç:
		"–ï—Å–ª–∏ –∫–ª—é—á key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–µ—à–µ items, —Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π n –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è
		 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É–∑–µ–ª (*node), –∏ –º—ã –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–æ if".
		 –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–≤–µ—Ç–∫–∞ else –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º).
	*/

	return "", false
}

func (c *LRUCache) Set(key, value string) {
	c.mu.Lock()
	defer c.mu.Unlock()

	if n, ok := c.items[key]; ok {
		n.value = value
		c.moveToFront(n)
		return
	}

	if len(c.items) >= c.capacity {
		c.removeOldest()
	}
}

func (c *LRUCache) moveToFront(n *node) {
	c.remove(n)
	c.addToFront(n)
}

func (c *LRUCache) addToFront(n *node) {
	n.prev = nil
	n.next = c.head
	if c.head != nil {
		c.head.prev = n
	}
	c.head = n
	if c.tail == nil {
		c.tail = n
	}
}

func (c *LRUCache) remove(n *node) {
	if n.prev == nil {
		n.prev.next = n.next
	} else {
		c.head.next = n.next
	}

	if n.next != nil {
		n.next.prev = n.prev
	} else {
		c.tail = n.prev
	}
}

func (c *LRUCache) removeOldest() {
	if c.tail != nil {
		delete(c.items, c.tail.key)
		c.remove(c.tail)
	}
}

/*
üìå –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
RWMutex –Ω—É–∂–µ–Ω, –∫–æ–≥–¥–∞ –º–Ω–æ–≥–æ —á—Ç–µ–Ω–∏–π –∏ –º–∞–ª–æ –∑–∞–ø–∏—Å–µ–π.
–ï—Å–ª–∏ –ø–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ ‚Äî –Ω—É–∂–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è.
–î–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞ –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å—é ‚Äî LRU.
*/
