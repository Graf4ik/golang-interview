package livecoding_checklist

import "fmt"

// 8. Передача аргументов в функции по указателю, по значению. Возврат нескольких аргументов из функции.

func modifyValue(val int) {
	val = 100 // Изменяется только локальная копия
}

func modifyPointer(ptr *int) {
	*ptr = 100 // Изменяем значение по указателю
}

func divide(a, b float64) (float64, error) {
	if b == 0 {
		return 0, fmt.Errorf("деление на ноль")
	}
	return a / b, nil
}

func calculate(x, y int) (sum int, diff int) {
	sum = x + y
	diff = x - y
	return // Неявный возврат sum и diff
}

type Point struct {
	X, Y int
}

// По значению (копия структуры)
func moveByValue(p Point, dx, dy int) Point {
	p.X += dx
	p.Y += dy
	return p
}

// По указателю (изменение оригинала)
func moveByPointer(p *Point, dx, dy int) {
	p.X += dx
	p.Y += dy
}

func createPoint(x, y int) *Point {
	return &Point{x, y} // Возвращаем указатель на локальную переменную (безопасно в Go)
}

func main() {
	// 1. Передача аргументов по значению (по умолчанию)
	x := 10
	modifyValue(x)
	modifyPointer(&x) // 2. Передача аргументов по указателю
	fmt.Println(x)    // 10 (оригинал не изменился)

	// 3. Возврат нескольких значений из функции
	result, err := divide(10, 2)
	if err != nil {
		fmt.Println("Ошибка:", err)
	} else {
		fmt.Println("Результат:", result) // 5
	}

	// 4. Именованные возвращаемые значения
	s, d := calculate(10, 5)
	fmt.Println(s, d) // 15, 5

	// 5. Пример с передачей структуры
	p1 := Point{10, 20}
	p2 := moveByValue(p1, 5, 5)
	fmt.Println(p1) // {10 20} (не изменился)
	fmt.Println(p2) // {15 25}

	moveByPointer(&p1, 5, 5)
	fmt.Println(p1) // {15 25} (изменился)

	// 6. Возврат указателя из функции
	p := createPoint(3, 4)
	fmt.Println(*p) // {3 4}
}

/*
7. Важные особенности:

Передача по значению:
-Функция получает копию аргумента
Изменения не влияют на оригинал
Подходит для небольших структур и базовых типов

Передача по указателю:
Функция получает адрес переменной
Изменения влияют на оригинал

Используйте для:
	Крупных структур (избегаем копирования)
	Когда нужно изменить оригинал
	Опциональных параметров (nil-указатель)

Возврат нескольких значений:
Часто используется для возврата результата и ошибки

Можно игнорировать значения с помощью _:

result, _ := divide(10, 2) // Игнорируем ошибку

Именованные возвращаемые значения:
Автоматически инициализируются нулевыми значениями
Улучшают читаемость для сложных функций
return без аргументов возвращает именованные значения

Указатели на базовые типы:
Редко используются (лучше возвращать значение)

Могут быть полезны для:
	Оптимизации производительности (избегание копирования)
	Изменения оригинала

8. Практические рекомендации:
Для небольших структур (до 3-4 полей) передавайте по значению
Для крупных структур используйте указатели
Если функция должна изменить аргумент - передавайте указатель
Возвращайте ошибки как последнее значение
Используйте именованные возвращаемые значения для сложных функций

Избегайте возврата указателей на локальные переменные, кроме случаев:
	Когда это специально требуется (фабричные методы)
	Для экономии памяти (крупные структуры)
*/
